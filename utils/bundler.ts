// File: utils/bundler.ts
import * as esbuild from 'esbuild';
import { NodeModulesPolyfillPlugin } from '@esbuild-plugins/node-modules-polyfill';
import { NodeGlobalsPolyfillPlugin } from '@esbuild-plugins/node-globals-polyfill';

/**
 * Bundles React code string into browser-executable JavaScript
 * @param {string} codeString - Raw React code including imports, TypeScript, JSX, etc.
 * @param {Object} options - Bundling options
 * @returns {Promise<string>} - Bundled JavaScript code
 */
export async function bundleReactCode(codeString: string, options: any = {}) {
    // Create a virtual file system for esbuild
    const virtualFS = {
        'virtual-component.tsx': codeString,
    };

    try {
        // Create a bundle configuration
        const bundleResult = await esbuild.build({
            entryPoints: ['virtual-component.tsx'],
            bundle: true,
            minify: false,
            format: 'iife',
            globalName: 'Component',
            target: 'es2015',
            platform: 'browser',
            plugins: [
                // Handle node polyfills if needed
                NodeGlobalsPolyfillPlugin(),
                NodeModulesPolyfillPlugin(),
                // Virtual file system to handle the input code string
                {
                    name: 'virtual-file-system',
                    setup(build) {
                        build.onResolve({ filter: /^virtual-component\.tsx$/ }, args => {
                            return { path: args.path, namespace: 'virtual-fs' };
                        });

                        build.onLoad({ filter: /.*/, namespace: 'virtual-fs' }, args => {
                            return {
                                contents: virtualFS[args.path as keyof typeof virtualFS],
                                loader: 'tsx',
                            };
                        });

                        // External packages should be resolved to CDN or marked as external
                        build.onResolve({ filter: /^react$|^react-dom$/ }, () => {
                            return { external: true };
                        });
                    },
                },
            ],
            write: false, // Don't write to disk
            outfile: 'virtual-output.js',
            define: {
                'process.env.NODE_ENV': '"production"',
            },
        });

        // Get the output text
        const outputText = new TextDecoder().decode(bundleResult.outputFiles[0].contents);

        // Create a wrapper with proper initialization
        const finalCode = `
// Bundled React Component - Generated by NextJS API
${outputText}

// Component is exported as a global variable and can be used with:
// const root = ReactDOM.createRoot(container);
// root.render(React.createElement(Component));
`;

        return finalCode;

    } catch (error) {
        console.error('Bundling error:', error);
        throw error;
    }
}